buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
        maven {
            name = "DimDev"
            url = "https://www.dimdev.org/maven/"
        }
        maven {
            name = "Forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "Sonatype"
            url = 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath 'com.github.Chocohead:ForgeGradle:moderniser-SNAPSHOT'
    }
}

//apply plugin: 'com.matthewprenger.cursegradle'
//apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'net.minecraftforge.gradle.tweaker-client'
apply plugin: 'java'
apply from: 'https://gist.githubusercontent.com/UpcraftLP/0a98a7dfe913bd3e99073efa7ad0353b/raw/mod_script.gradle'

def buildVersion = project.mod_version + ext.buildName
def change_log = ext.changeLog
def buildTimeStamp = new Date().getTime()

def username = project.artifact
if (project.hasProperty('dev_mail')) {
    username = findProperty('dev_mail')
} else if (project.hasProperty('dev_username')) {
    username = findProperty('dev_username')
}

group project.group
version = "${project.mc_version}-" + buildVersion
archivesBaseName = project.artifact

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.build.doLast {
    println("Current version is ${project.artifact}-${project.version}")
    println("Changelog:")
    println(change_log)
}

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        name = "DimDev"
        url = "https://www.dimdev.org/maven/"
    }

    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }

    maven {
        name = "Femtopedia"
        url = "http://femtopedia.de/maven/"
    }
    maven { url 'http://repo.strezz.org/artifactory/list/Strezz-Central' }
}

dependencies {
    implementation 'com.github.Chocohead:Rift:jitpack-SNAPSHOT:dev'

    //TODO switch to runtime once ATs work
    //TODO switch to universal jar once deobfCompile works
    //implementation "com.github.shedaniel:RoughlyEnoughItems:${rei_version}"

    //implementation "com.github.boundarybreaker:ProbeDataProvider:${pdp_version}"

    //annotation magic ftw
    compileOnly("com.github.InsomniaKitten:Pylon:${pylon_version}") {
        exclude group: "org.dimdev", module: "rift"
    }
    annotationProcessor "com.github.InsomniaKitten:Pylon:${pylon_version}"

}

minecraft {
    version = project.mc_version
    mappings = project.mc_mappings
    if (project.hasProperty('runDir')) runDir = findProperty('runDir')
    else if (file('../run').exists()) runDir = "../run"
    else runDir = "run"

    //tweakClass = 'org.dimdev.riftloader.launch.RiftLoaderTweaker' //pre-1.0.3
    tweakClass = 'org.dimdev.riftloader.launch.RiftLoaderClientTweaker'

    //configure login
    if (project.hasProperty('dev_uuid')) {
        clientRunArgs += "--uuid=${dev_uuid}"
    } else {
        clientRunArgs += "--username=${username}"
        if (project.hasProperty('dev_password')) clientRunArgs += "--password=${dev_password}"
    }

    //skip the screen to confirm that you want to load a world with missing registry entries
    clientJvmArgs += "-Dfml.doNotBackup=true"

    //skip jansi warnings in the log
    clientJvmArgs += '-Dlog4j.skipJansi=true'


    //auto-fill values
    replace "@VERSION@", project.mod_version
    def fingerPrintKey = project.hasProperty('public_key') ? findProperty('public_key').replace(":", "").toLowerCase(Locale.ROOT) : "undefined"
    replace "@FINGERPRINTKEY@", fingerPrintKey
    if (project.hasProperty('update_json')) replace "@UPDATE_JSON@", findProperty('update_json')
    replaceIn "${project.reference_class}".replace(".", "/") + ".java"
    replaceIn "pack.mcmeta"
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        compileJava {
            options.encoding = 'UTF-8'
        }
    }
} else {
    throw new IllegalArgumentException("wrong java version")
}

jar {
    //from sourceSets.main.output
    from sourceSets.api.output
    from "LICENSE"
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.mod_version}",
            "Built-On": project.version,
            "Built-On-Rift": project.rift_version,
            "Timestamp": buildTimeStamp,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}"
            //"Main-Class": project.installer_main_class
    )
    classifier '' //this is the main jar!
}

sourceJar {
    from "LICENSE"
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name + "-sources",
            "Implementation-Version": "${project.mod_version}",
            "Built-On": project.version,
            "Built-On-Rift": project.rift_version,
            "Timestamp": buildTimeStamp,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:sources"
    )
}

task deobfJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.output
    from sourceSets.api.output
    from "LICENSE"
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name + "-deobf",
            "Implementation-Version": project.version,
            "Built-On": project.mc_version,
            "Built-On-Rift": project.rift_version,
            "Timestamp": buildTimeStamp,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:deobf"
    )
    classifier 'deobf'
}

task apiJar(type: Jar) {
    from sourceSets.api.allJava
    from "LICENSE"
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name + "-api",
            "Implementation-Version": project.version,
            "Built-On": project.mc_version,
            "Built-On-Rift": project.rift_version,
            "Timestamp": buildTimeStamp,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:api"
    )
    classifier 'api'
}

// Javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    from "LICENSE"
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name + "-javadoc",
            "Implementation-Version": project.version,
            "Built-On": project.mc_version,
            "Built-On-Rift": project.rift_version,
            "Timestamp": buildTimeStamp,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:javadoc"
    )
    classifier = 'javadoc'
}

//sign Jar
task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

task signDeobfJar(type: SignJar, dependsOn: deobfJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = deobfJar.archivePath
    outputFile = deobfJar.archivePath
}

task signJavadocJar(type: SignJar, dependsOn: javadocJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = javadocJar.archivePath
    outputFile = javadocJar.archivePath
}

task signApiJar(type: SignJar, dependsOn: apiJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = apiJar.archivePath
    outputFile = apiJar.archivePath
}

tasks.build.dependsOn signJar, signDeobfJar, signJavadocJar, signApiJar

artifacts {
    archives apiJar
    archives sourceJar
    archives javadocJar
    archives deobfJar
}
